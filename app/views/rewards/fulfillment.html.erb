<div class="container mx-auto px-4 py-8">
  <div class="mb-8 flex justify-between items-center">
    <div>
      <h1 class="text-3xl font-bold mb-2">Fulfillment Dashboard</h1>
      <p class="text-gray-600">Manage reward fulfillment for <%= @project.title %></p>
    </div>
    <div>
      <%= link_to "Back to Project", project_path(@project), class: "px-4 py-2 bg-gray-100 rounded-md text-gray-800 hover:bg-gray-200" %>
    </div>
  </div>
  
  <div class="bg-white rounded-lg shadow-md p-6 mb-8">
    <h2 class="text-xl font-semibold mb-4">Project Overview</h2>
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
      <div class="bg-gray-50 p-4 rounded-lg">
        <p class="text-sm text-gray-500 mb-1">Total Backers</p>
        <p class="text-2xl font-bold"><%= @project.pledges.distinct.count(:user_id) %></p>
      </div>
      <div class="bg-gray-50 p-4 rounded-lg">
        <p class="text-sm text-gray-500 mb-1">Total Rewards</p>
        <p class="text-2xl font-bold"><%= @rewards.count %></p>
      </div>
      <div class="bg-gray-50 p-4 rounded-lg">
        <p class="text-sm text-gray-500 mb-1">Overall Fulfillment Progress</p>
        <% overall_progress = @rewards.any? ? @rewards.sum(&:fulfillment_progress) / @rewards.count : 0 %>
        <div class="flex items-center">
          <p class="text-2xl font-bold mr-3"><%= overall_progress %>%</p>
          <div class="flex-grow h-2 bg-gray-200 rounded-full overflow-hidden">
            <div class="h-full bg-indigo-600 rounded-full" style="width: <%= overall_progress %>%"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <div class="bg-white rounded-lg shadow-md p-6">
    <h2 class="text-xl font-semibold mb-6">Reward Fulfillment Status</h2>
    
    <% if @rewards.any? %>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead>
            <tr class="text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
              <th class="px-6 py-3">Reward</th>
              <th class="px-6 py-3">Backers</th>
              <th class="px-6 py-3">Status</th>
              <th class="px-6 py-3">Progress</th>
              <th class="px-6 py-3">Est. Shipping</th>
              <th class="px-6 py-3">Actions</th>
            </tr>
          </thead>
          <tbody class="divide-y divide-gray-200">
            <% @rewards.each do |reward| %>
              <tr>
                <td class="px-6 py-4">
                  <div class="font-medium text-gray-900"><%= reward.title %></div>
                  <div class="text-sm text-gray-500"><%= number_to_currency(reward.amount) %></div>
                </td>
                <td class="px-6 py-4">
                  <span class="font-medium"><%= reward.backers_count %></span>
                </td>
                <td class="px-6 py-4">
                  <div class="flex items-center space-x-2">
                    <span class="mr-1 font-medium">Status:</span>
                    <%= render(RewardItem::StatusBadgeComponent.new(status: reward.status)) %>
                  </div>
                </td>
                <td class="px-6 py-4 w-64">
                  <div class="flex items-center">
                    <div class="w-full bg-gray-200 rounded-full h-2.5 mr-2">
                      <div class="bg-<%= reward.status_color %>-600 h-2.5 rounded-full" style="width: <%= reward.fulfillment_progress %>%"></div>
                    </div>
                    <span class="text-sm font-medium"><%= reward.fulfillment_progress %>%</span>
                  </div>
                </td>
                <td class="px-6 py-4">
                  <%= reward.estimated_shipping_date ? reward.estimated_shipping_date.strftime("%b %d, %Y") : "Not set" %>
                </td>
                <td class="px-6 py-4">
                  <button data-reward-id="<%= reward.id %>" class="update-fulfillment-btn text-indigo-600 hover:text-indigo-900">Update</button>
                </td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </div>
    <% else %>
      <div class="text-center py-8">
        <p class="text-gray-500">No rewards found for this project.</p>
      </div>
    <% end %>
  </div>
</div>

<!-- Fulfillment Update Modal -->
<div id="fulfillment-modal" class="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center hidden z-50">
  <div class="bg-white rounded-lg max-w-md w-full p-6">
    <div class="flex justify-between items-center mb-4">
      <h3 class="text-lg font-medium" id="modal-title">Update Fulfillment Status</h3>
      <button id="close-modal" class="text-gray-400 hover:text-gray-500">
        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    
    <%= form_with url: "#", method: :patch, id: "fulfillment-form", class: "space-y-4" do |form| %>
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Status</label>
        <select id="reward_status" name="reward[status]" class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
          <% Reward::STATUSES.each do |key, value| %>
            <option value="<%= value %>"><%= key.to_s.titleize %></option>
          <% end %>
        </select>
      </div>
      
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Progress (%)</label>
        <input type="number" id="reward_fulfillment_progress" name="reward[fulfillment_progress]" min="0" max="100" class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
      </div>
      
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Estimated Shipping Date</label>
        <input type="date" id="reward_estimated_shipping_date" name="reward[estimated_shipping_date]" class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
      </div>
      
      <div class="flex justify-end pt-4">
        <button type="button" id="cancel-btn" class="mr-3 px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
          Cancel
        </button>
        <button type="submit" class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
          Save Changes
        </button>
      </div>
    <% end %>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const modal = document.getElementById('fulfillment-modal');
    const closeModal = document.getElementById('close-modal');
    const cancelBtn = document.getElementById('cancel-btn');
    const form = document.getElementById('fulfillment-form');
    const updateButtons = document.querySelectorAll('.update-fulfillment-btn');
    
    let currentRewardId = null;
    
    // Open modal when update button is clicked
    updateButtons.forEach(button => {
      button.addEventListener('click', function() {
        currentRewardId = this.dataset.rewardId;
        
        // Update form action
        form.action = '<%= request.base_url %>/projects/<%= @project.id %>/rewards/' + currentRewardId + '/update_fulfillment';
        
        // Show modal
        modal.classList.remove('hidden');
      });
    });
    
    // Close modal functions
    function hideModal() {
      modal.classList.add('hidden');
    }
    
    closeModal.addEventListener('click', hideModal);
    cancelBtn.addEventListener('click', hideModal);
    
    // Close modal when clicking outside
    modal.addEventListener('click', function(event) {
      if (event.target === modal) {
        hideModal();
      }
    });
    
    // Handle form submission with AJAX
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const formData = new FormData(form);
      
      fetch(form.action, {
        method: 'PATCH',
        body: formData,
        headers: {
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.status === 'success') {
          // Refresh the page to show updated data
          window.location.reload();
        } else {
          alert('Error updating fulfillment status');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('An error occurred while updating the fulfillment status');
      });
    });
  });
</script>
